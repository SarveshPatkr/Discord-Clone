{"version":3,"sources":["ChatHeader.js","Message.js","features/userSlice.js","features/appSlice.js","firebase.js","Chat.js","SidebarChannel.js","Sidebar.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["ChatHeader","channelName","className","type","placeholder","Message","message","timestamp","user","Avatar","src","photo","displayName","Date","toDate","toUTCString","userSlice","createSlice","name","initialState","reducers","login","state","action","payload","logOut","actions","selectUser","appSlice","channelId","setChannelInfo","selectChannelId","app","selectChannelName","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","Chat","useSelector","useState","input","setinput","messages","setmessages","useEffect","collection","doc","orderBy","onSnapshot","Snapshot","docs","map","data","value","onChange","e","target","disabled","onClick","preventDefault","add","FieldValue","serverTimestamp","SidebarChannel","id","pass","dispatch","useDispatch","password","prompt","console","log","alert","Sidebar","channels","setchannel","channel","key","fontSize","uid","substring","IconButton","signOut","Login","alt","Button","signInWithPopup","catch","error","App","onAuthStateChanged","AuthUser","photoURL","email","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.27411e50.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ChatHeader.css'\r\nimport NotificationsOffIcon from '@material-ui/icons/NotificationsOff';\r\nimport LocationOffIcon from '@material-ui/icons/LocationOff';\r\nimport PeopleAltRoundedIcon from '@material-ui/icons/PeopleAltRounded';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\n\r\n\r\nfunction ChatHeader( { channelName }) {\r\n    return (\r\n        <div className='chatheader' >\r\n            <div className=\"chatheader__left\">\r\n            <h4><span className=\"chatheader__hash\">#</span>{channelName}</h4>\r\n            </div>\r\n            <div className=\"chatheader__right\">\r\n                <NotificationsOffIcon/>\r\n                <LocationOffIcon/>\r\n                <PeopleAltRoundedIcon/>\r\n                <div className=\"chatheader__search\">\r\n                    <input type=\"text\" placeholder=\"Search (Do not work yet)\" />\r\n                    <SearchIcon/>\r\n                </div>\r\n                <SendIcon/>\r\n                <HelpIcon/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatHeader\r\n","import { Avatar } from '@material-ui/core'\r\nimport React from 'react'\r\nimport './Message.css'\r\n\r\nfunction Message({ message, timestamp, user }) {\r\n    return (\r\n        <div className='message' >\r\n            <Avatar src={user.photo} />\r\n            <div className=\"message__info\">\r\n                <p>\r\n                    {user.displayName}\r\n                    <span className=\"message__timestamp\">{\r\n                        new Date(timestamp?.toDate()).toUTCString()\r\n                    }</span>\r\n                </p>\r\n                <h3>{message}</h3>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n\r\n      state.user = action.payload;\r\n    },\r\n    logOut: (state) => {\r\n      state.user = null;\r\n    },\r\n  },\r\n});\r\nexport const { login, logOut } = userSlice.actions;\r\nexport const selectUser = (state) => state.user.user;\r\nexport default userSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nexport const appSlice = createSlice({\r\n  name: 'app',\r\n  initialState: {\r\n    channelId: null,\r\n    channelName: null\r\n  },\r\n  reducers: {\r\n    setChannelInfo: (state, action )=> {\r\n      state.channelId = action.payload.channelId;\r\n      state.channelName = action.payload.channelName;\r\n\r\n    },\r\n  },\r\n});\r\nexport const { setChannelInfo } = appSlice.actions;\r\n\r\nexport const selectChannelId = ( state ) => state.app.channelId;\r\nexport const selectChannelName = ( state ) => state.app.channelName;\r\n\r\n\r\nexport default appSlice.reducer;","import firebase from 'firebase'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAu3QcKsTq44QisJWYE1nQA7ftVdZZkiig\",\r\n    authDomain: \"discord-by-sarvesh-patkar.firebaseapp.com\",\r\n    databaseURL: \"https://discord-by-sarvesh-patkar.firebaseio.com\",\r\n    projectId: \"discord-by-sarvesh-patkar\",\r\n    storageBucket: \"discord-by-sarvesh-patkar.appspot.com\",\r\n    messagingSenderId: \"432057910635\",\r\n    appId: \"1:432057910635:web:19856577175f82b566382e\",\r\n    measurementId: \"G-QV5FGR7QHQ\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth , provider };\r\nexport default db;\r\n","import React from 'react'\r\nimport './Chat.css'\r\nimport ChatHeader from './ChatHeader.js'\r\nimport Message from './Message.js'\r\nimport AddCircleOutlineRoundedIcon from '@material-ui/icons/AddCircleOutlineRounded';\r\nimport CardGiftcardRoundedIcon from '@material-ui/icons/CardGiftcardRounded';\r\nimport GifRoundedIcon from '@material-ui/icons/GifRounded';\r\nimport EmojiEmotionsOutlinedIcon from '@material-ui/icons/EmojiEmotionsOutlined';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from './features/userSlice';\r\nimport { selectChannelId, selectChannelName } from './features/appSlice';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport db from './firebase';\r\nimport firebase from 'firebase';\r\n\r\nfunction Chat() {\r\n    const user = useSelector(selectUser);\r\n    const channelId = useSelector(selectChannelId)\r\n    const channelName = useSelector(selectChannelName)\r\n    const [input, setinput] = useState('');\r\n    const [messages, setmessages] = useState([]);\r\n    useEffect(() => {\r\n        if (channelId) {\r\n            db.collection('channels').doc(channelId).collection('messages').orderBy('timestamp', 'desc').onSnapshot(Snapshot => (\r\n                setmessages(Snapshot.docs.map((doc) => doc.data()))\r\n            ))\r\n        }\r\n\r\n    }, [channelId])\r\n    const sendMesasges = e => {\r\n        e.preventDefault();\r\n        if(input===' '){\r\n\r\n        }else{\r\n            db.collection('channels').doc(channelId).collection('messages').add({\r\n            message: input,\r\n            user: user,\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp()\r\n        });\r\n        }\r\n\r\n        \r\n\r\n        setinput('')\r\n    }\r\n    return (\r\n        <div className='chat' >\r\n            <ChatHeader channelName={channelName} />\r\n            <div className=\"chat__messages\">\r\n                {messages.map((messages) => (\r\n                    <Message\r\n                        message= {messages.message}\r\n                        user= {messages.user}\r\n                        timestamp= {messages.timestamp}\r\n                    />\r\n                ))}\r\n\r\n            </div>\r\n            <div className=\"chat__input\">\r\n                <AddCircleOutlineRoundedIcon />\r\n                <form>\r\n                    <input value={input} onChange={e => setinput(e.target.value)} disabled={!channelId} placeholder=\"Type a message\" />\r\n                    <button disabled={!input} onClick={sendMesasges} type=\"submit\">Send</button>\r\n                </form>\r\n                <div className=\"chat__messageicon\">\r\n                    <CardGiftcardRoundedIcon />\r\n                    <GifRoundedIcon />\r\n                    <EmojiEmotionsOutlinedIcon />\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","import React from 'react'\r\nimport './SidebarChannel.css';\r\nimport { setChannelInfo } from './features/appSlice';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nfunction SidebarChannel({ id, channelName, pass }) {\r\n    const dispatch = useDispatch();\r\n    const verify = () => {\r\n        var password = prompt('Enter Room Pasword');\r\n        console.log(password);\r\n        console.log(pass);\r\n        if (pass === password) {\r\n            \r\n            dispatch(setChannelInfo({\r\n                channelId: id,\r\n                channelName: channelName,\r\n            }))\r\n        } else {\r\n            alert('Wrong Password');\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"sidebar__channel\" onClick={verify}>\r\n            <h4><span className=\"sidebarchannel__hash\">#</span>{channelName}</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarChannel\r\n","import React, { useEffect, useState } from 'react'\r\nimport './Sidebar.css';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from './features/userSlice'\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport SidebarChannel from './SidebarChannel';\r\nimport SignalCellularAltIcon from '@material-ui/icons/SignalCellularAlt';\r\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\r\nimport CallRoundedIcon from '@material-ui/icons/CallRounded';\r\nimport { Avatar, IconButton } from '@material-ui/core';\r\nimport MicOffIcon from '@material-ui/icons/MicOff';\r\nimport HeadsetIcon from '@material-ui/icons/Headset';\r\nimport ExitToAppOutlinedIcon from '@material-ui/icons/ExitToAppOutlined';\r\nimport db, { auth } from './firebase';\r\n\r\n\r\nfunction Sidebar() {\r\n    const user = useSelector(selectUser);\r\n    const [channels, setchannel] = useState([]);\r\n    // const [pass, setpass] = useState('')\r\n\r\n    useEffect(() => {\r\n        db.collection('channels').onSnapshot(Snapshot => (\r\n            setchannel(Snapshot.docs.map(docs => ({\r\n                id: docs.id,\r\n                channel: docs.data()\r\n            })))\r\n        ))\r\n    }, [])\r\n    const addChannel = e => {\r\n        const channelName = prompt('Enter Channel Name');\r\n        const password = prompt('Create Password');\r\n        // setpass(password);\r\n\r\n        // console.log(pass);\r\n\r\n        if (channelName) {\r\n            db.collection('channels').add({\r\n                channelName: channelName,\r\n                pass: password\r\n            })\r\n        }\r\n\r\n    }\r\n    return (\r\n        <div className='sidebar' >\r\n\r\n            <div className='sidebar__top' >\r\n                <h3>Discord</h3>\r\n                <ExpandMoreIcon />\r\n            </div>\r\n            <div className=\"sidebar__channels\">\r\n                <div className=\"sidebar__channelheader\">\r\n                    <div className=\"sidebar__header\">\r\n                        <ExpandMoreIcon />\r\n                        <h4>Text Channels</h4>\r\n                    </div>\r\n                    <AddIcon onClick={addChannel} className=\"sidebar__addchannel\" />\r\n                </div>\r\n                <div className=\"sidebar__channellist\">\r\n                    {channels.map(({ id, channel }) => (\r\n                        <SidebarChannel key={id} pass={channel.pass} id={id} channelName={channel.channelName} />\r\n                    ))}\r\n\r\n                </div>\r\n            </div>\r\n            <div className=\"sidebar__voice\">\r\n                <SignalCellularAltIcon className=\"sidebar__voiceicon\" fontSize='large' />\r\n                <div className=\"sidebar__voiceinfo\">\r\n                    <h3>Voice Not Connected</h3>\r\n                    <p>Stream(Not Available)</p>\r\n                </div>\r\n                <div className=\"sidebar__voiceicons\">\r\n                    <InfoOutlinedIcon />\r\n                    <CallRoundedIcon />\r\n                </div>\r\n            </div>\r\n            <div className=\"sidebar__profile\">\r\n                <Avatar src={user.photo} />\r\n                <div className=\"sidebar__profileinfo\">\r\n                    <h3>{user.displayName}</h3>\r\n                    <p>#{user.uid.substring(0, 7)}</p>\r\n                </div>\r\n\r\n                <div className=\"sidebar__profileicons\">\r\n                    <MicOffIcon />\r\n                    <HeadsetIcon />\r\n                </div>\r\n                <p className='logout' >\r\n                    log out\r\n                    <IconButton onClick={() => { auth.signOut() }}>\r\n\r\n                        <ExitToAppOutlinedIcon />\r\n                    </IconButton>\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import { Button } from '@material-ui/core';\r\n\r\nimport React from 'react';\r\nimport './Login.css';\r\nimport { auth , provider } from'./firebase.js';\r\n\r\n\r\nfunction Login() {\r\n    const signIn = () =>{ \r\n        auth.signInWithPopup(provider).catch((error) => alert(error.message));\r\n    }\r\n    return (\r\n        <div className='login' >\r\n            <div className=\"login__text\"> \r\n                <img src=\"./discord_logo.png\" alt=\"\"/>\r\n                <h2>Discord <span className=\"author\">by Sarvesh Patkar</span> </h2>\r\n            </div>\r\n            <Button onClick={signIn}>log in</Button>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport './App.css';\r\nimport Chat from './Chat';\r\nimport Sidebar from './Sidebar.js';\r\nimport { selectUser } from './features/userSlice'\r\nimport { login, logOut } from './features/userSlice'\r\nimport Login from './Login.js';\r\nimport { useEffect } from 'react';\r\nimport { auth } from './firebase';\r\n\r\n\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n\r\n\r\n  const user = useSelector(selectUser);\r\n\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged((AuthUser) => {\r\n      console.log('user is ', AuthUser);\r\n      if (AuthUser) {\r\n        dispatch(login({\r\n          uid: AuthUser.uid,\r\n          photo: AuthUser.photoURL,\r\n          email:AuthUser.email,\r\n          displayName: AuthUser.displayName\r\n        }));\r\n      }\r\n      else {\r\n        dispatch(logOut());\r\n      }\r\n    });\r\n  }, [dispatch])\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      { user ? (\r\n        < >\r\n          < Sidebar />\r\n          <Chat />\r\n        </>\r\n      ) : (\r\n          <Login />\r\n        )}\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice.js';\r\nimport appReducer from '../features/appSlice.js';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    app: appReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}